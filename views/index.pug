extends layout

block content
  div.mdc-layout-grid
    div.mdc-layout-grid__inner
      div.mdc-layout-grid__cell--span-8-desktop
        video#stream(muted, autoplay, controls)
      div.mdc-layout-grid__cell--span-4-desktop
        div#chat
          div.message-list-container
            div.message-list
          div.message-input
  script.
    var video = document.getElementById('stream');
    var videoSrc = '#{streamUrl}';
    if (Hls.isSupported()) {
      var hls = new Hls();
      hls.loadSource(videoSrc);
      hls.attachMedia(video);
      hls.on(Hls.Events.MANIFEST_PARSED, function() {
        video.play();
      });
    }
    // hls.js is not supported on platforms that do not have Media Source Extensions (MSE) enabled.
    // When the browser has built-in HLS support (check using `canPlayType`), we can provide an HLS manifest (i.e. .m3u8 URL) directly to the video element through the `src` property.
    // This is using the built-in support of the plain video element, without using hls.js.
    // Note: it would be more normal to wait on the 'canplay' event below however on Safari (where you are most likely to find built-in HLS support) the video.src URL must be on the user-driven
    // white-list before a 'canplay' event will be emitted; the last video event that can be reliably listened-for when the URL is not on the white-list is 'loadedmetadata'.
    else if (video.canPlayType('application/vnd.apple.mpegurl')) {
      video.src = videoSrc;
      video.addEventListener('loadedmetadata', function() {
        video.play();
      });
    }
  script.
    var lastMessage = null;
    function addMessage(message) {
      var messageList = document.querySelector('.message-list');
      if (lastMessage == null || (lastMessage.username !== message.username) || (message.createdAt - lastMessage.createdAt >= 600000)) {
        var usernameDiv = document.createElement('div');
        usernameDiv.className = 'message-username mdc-typography--subtitle2';
        usernameDiv.innerHTML = message.username;
        messageList.appendChild(usernameDiv);
      }
      var messageDiv = document.createElement('div');
      messageDiv.className = 'message-text mdc-typography--body2';
      messageDiv.innerHTML = message.content;
      messageList.appendChild(messageDiv);
      linkifyElement(messageDiv);
      lastMessage = message;
    }

    var socket = io('https://chat.banned.video', { 'query': { 'token': null } });
    socket.on('connect', function() {
      socket.emit("join", { roomId: '#{channelId}' });
    });
    socket.on("message", function (data) {
      addMessage(data);
    });
    socket.on("users_online", function (data) {
      console.log("Got users_online: " + data);
    });
    socket.on("past_messages", function (data) {
      for (var i = 0; i < data.length; i++) {
        addMessage(data[i]);
      }
    });
    socket.on("start_typing", function (data) {
      console.log("Got start_typing: " + data);
    });
    socket.on("end_typing", function (data) {
      console.log("Got end_typing: " + data);
    });
